export enum errno {
  success, _2big, acces, addrinuse, addrnotavail, afnosupport, again, already,
  badf, badmsg, busy, canceled, child, connaborted, connrefused, connreset,
  deadlk, destaddrreq, dom, dquot, exist, fault, fbig, hostunreach, idrm, ilseq,
  inprogress, intr, inval, io, isconn, isdir, loop, mfile, mlink, msgsize,
  multihop, nametoolong, netdown, netreset, netunreach, nfile, nobufs, nodev,
  noent, noexec, nolck, nolink, nomem, nomsg, noprotoopt, nospc, nosys, notconn,
  notdir, notempty, notrecoverable, notsock, notsup, notty, nxio, overflow,
  ownerdead, perm, pipe, proto, protonosupport, prototype, range, rofs, spipe,
  srch, stale, timedout, txtbsy, xdev, notcapable,
}

export function errno_string(err: errno): string {
  if (err === errno.success)        return "No error occurred. System call completed successfully"
  if (err === errno._2big)          return "Argument list too long"
  if (err === errno.acces)          return "Permission denied"
  if (err === errno.addrinuse)      return "Address in use"
  if (err === errno.addrnotavail)   return "Address not available"
  if (err === errno.afnosupport)    return "Address family not supported"
  if (err === errno.again)          return "Resource unavailable, or operation would block"
  if (err === errno.already)        return "Connection already in progress"
  if (err === errno.badf)           return "Bad file descriptor"
  if (err === errno.badmsg)         return "Bad message"
  if (err === errno.busy)           return "Device or resource busy"
  if (err === errno.canceled)       return "Operation canceled"
  if (err === errno.child)          return "No child processes"
  if (err === errno.connaborted)    return "Connection aborted"
  if (err === errno.connrefused)    return "Connection refused"
  if (err === errno.connreset)      return "Connection reset"
  if (err === errno.deadlk)         return "Resource deadlock would occur"
  if (err === errno.destaddrreq)    return "Destination address required"
  if (err === errno.dom)            return "Mathematics argument out of domain of function"
  if (err === errno.dquot)          return "Reserved"
  if (err === errno.exist)          return "File exists"
  if (err === errno.fault)          return "Bad address"
  if (err === errno.fbig)           return "File too large"
  if (err === errno.hostunreach)    return "Host is unreachable"
  if (err === errno.idrm)           return "Identifier removed"
  if (err === errno.ilseq)          return "Illegal byte sequence"
  if (err === errno.inprogress)     return "Operation in progress"
  if (err === errno.intr)           return "Interrupted function"
  if (err === errno.inval)          return "Invalid argument"
  if (err === errno.io)             return "I/O error"
  if (err === errno.isconn)         return "Socket is connected"
  if (err === errno.isdir)          return "Is a directory"
  if (err === errno.loop)           return "Too many levels of symbolic links"
  if (err === errno.mfile)          return "File descriptor value too large"
  if (err === errno.mlink)          return "Too many links"
  if (err === errno.msgsize)        return "Message too large"
  if (err === errno.multihop)       return "Reserved"
  if (err === errno.nametoolong)    return "Filename too long"
  if (err === errno.netdown)        return "Network is down"
  if (err === errno.netreset)       return "Connection aborted by network"
  if (err === errno.netunreach)     return "Network unreachable"
  if (err === errno.nfile)          return "Too many files open in system"
  if (err === errno.nobufs)         return "No buffer space available"
  if (err === errno.nodev)          return "No such device"
  if (err === errno.noent)          return "No such file or directory"
  if (err === errno.noexec)         return "Executable file format error"
  if (err === errno.nolck)          return "No locks available"
  if (err === errno.nolink)         return "Reserved"
  if (err === errno.nomem)          return "Not enough space"
  if (err === errno.nomsg)          return "No message of the desired type"
  if (err === errno.noprotoopt)     return "Protocol not available"
  if (err === errno.nospc)          return "No space left on device"
  if (err === errno.nosys)          return "Function not supported"
  if (err === errno.notconn)        return "The socket is not connected"
  if (err === errno.notdir)         return "Not a directory or a symbolic link to a directory"
  if (err === errno.notempty)       return "Directory not empty"
  if (err === errno.notrecoverable) return "State not recoverable"
  if (err === errno.notsock)        return "Not a socket"
  if (err === errno.notsup)         return "Not supported, or operation not supported on socket"
  if (err === errno.notty)          return "Inappropriate I/O control operation"
  if (err === errno.nxio)           return "No such device or address"
  if (err === errno.overflow)       return "Value too large to be stored in data type"
  if (err === errno.ownerdead)      return "Previous owner died"
  if (err === errno.perm)           return "Operation not permitted"
  if (err === errno.pipe)           return "Broken pipe"
  if (err === errno.proto)          return "Protocol error"
  if (err === errno.protonosupport) return "Protocol not supported"
  if (err === errno.prototype)      return "Protocol wrong type for socket"
  if (err === errno.range)          return "Result too large"
  if (err === errno.rofs)           return "Read-only file system"
  if (err === errno.spipe)          return "Invalid seek"
  if (err === errno.srch)           return "No such process"
  if (err === errno.stale)          return "Reserved"
  if (err === errno.timedout)       return "Connection timed out"
  if (err === errno.txtbsy)         return "Text file busy"
  if (err === errno.xdev)           return "Cross-device link"
  if (err === errno.notcapable)     return "Extension: Capabilities insufficient"
  return `Unknown errno value: ${err}`
}
